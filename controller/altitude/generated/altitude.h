//--------------------------------------------------------------------------------
// Code generated by jFuzzyLogic
// jFuzzyLogic Version : JFuzzyLogic 3.3 (build 2015-04-09), by Pablo Cingolani 
// jFuzzyLogic creted by Pablo Cingolani
//--------------------------------------------------------------------------------


#include <stdio.h>

#include <stdlib.h>
double ruleAccumulationMethod_max(double defuzzifierValue, double valueToAggregate)	{ return ( defuzzifierValue > valueToAggregate ? defuzzifierValue : valueToAggregate ); }

double ruleActivationMethod_min(double degreeOfSupport, double membership)	{ return (degreeOfSupport < membership ? degreeOfSupport : membership); }

double ruleConnectionMethod_and(double antecedent1, double antecedent2)	{ return (antecedent1 < antecedent2 ? antecedent1 : antecedent2); }

class FunctionBlock_alt_controller {

	public: 
	// VAR_INPUT
	double alt;
	double alt_dot;

	// VAR_OUTPUT
	double power;

	private: 
	// FUZZIFY alt
	double alt_n;
	double alt_p;
	double alt_z;

	// FUZZIFY alt_dot
	double alt_dot_n;
	double alt_dot_p;
	double alt_dot_z;


	// DEFUZZIFY power
	double defuzzify_power[1000];


	public:
	FunctionBlock_alt_controller();
	void calc();
	void print();

	private:
	void defuzzify();
	void fuzzify();
	void reset();
	double membership_alt_n(double x);
	double membership_alt_p(double x);
	double membership_alt_z(double x);
	double membership_alt_dot_n(double x);
	double membership_alt_dot_p(double x);
	double membership_alt_dot_z(double x);
	double membership_power_n(double x);
	double membership_power_o(double x);
	double membership_power_p(double x);
	void calc_No1();

};

// Constructor
FunctionBlock_alt_controller::FunctionBlock_alt_controller() {
	power = 0.0;
}

// Calculate function block
void FunctionBlock_alt_controller::calc() {
	reset();
	fuzzify();
	calc_No1();
	defuzzify();
}

// RULEBLOCK No1
void FunctionBlock_alt_controller::calc_No1() {
	// RULE 1 : IF (alt IS p) AND (alt_dot IS n) THEN power IS o;
	double degreeOfSupport_1 = 1.0 * ( ruleConnectionMethod_and(alt_p , alt_dot_n) );
	if( degreeOfSupport_1 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_o(x);
			double y = ruleActivationMethod_min( degreeOfSupport_1 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

	// RULE 2 : IF (alt IS p) AND (alt_dot IS z) THEN power IS n;
	double degreeOfSupport_2 = 1.0 * ( ruleConnectionMethod_and(alt_p , alt_dot_z) );
	if( degreeOfSupport_2 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_n(x);
			double y = ruleActivationMethod_min( degreeOfSupport_2 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

	// RULE 3 : IF (alt IS p) AND (alt_dot IS p) THEN power IS n;
	double degreeOfSupport_3 = 1.0 * ( ruleConnectionMethod_and(alt_p , alt_dot_p) );
	if( degreeOfSupport_3 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_n(x);
			double y = ruleActivationMethod_min( degreeOfSupport_3 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

	// RULE 4 : IF (alt IS z) AND (alt_dot IS p) THEN power IS n;
	double degreeOfSupport_4 = 1.0 * ( ruleConnectionMethod_and(alt_z , alt_dot_p) );
	if( degreeOfSupport_4 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_n(x);
			double y = ruleActivationMethod_min( degreeOfSupport_4 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

	// RULE 5 : IF (alt IS z) AND (alt_dot IS z) THEN power IS o;
	double degreeOfSupport_5 = 1.0 * ( ruleConnectionMethod_and(alt_z , alt_dot_z) );
	if( degreeOfSupport_5 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_o(x);
			double y = ruleActivationMethod_min( degreeOfSupport_5 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

	// RULE 6 : IF (alt IS z) AND (alt_dot IS n) THEN power IS p;
	double degreeOfSupport_6 = 1.0 * ( ruleConnectionMethod_and(alt_z , alt_dot_n) );
	if( degreeOfSupport_6 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_p(x);
			double y = ruleActivationMethod_min( degreeOfSupport_6 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

	// RULE 8 : IF (alt IS n) AND (alt_dot IS n) THEN power IS p;
	double degreeOfSupport_8 = 1.0 * ( ruleConnectionMethod_and(alt_n , alt_dot_n) );
	if( degreeOfSupport_8 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_p(x);
			double y = ruleActivationMethod_min( degreeOfSupport_8 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

	// RULE 9 : IF (alt IS n) AND (alt_dot IS z) THEN power IS p;
	double degreeOfSupport_9 = 1.0 * ( ruleConnectionMethod_and(alt_n , alt_dot_z) );
	if( degreeOfSupport_9 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_p(x);
			double y = ruleActivationMethod_min( degreeOfSupport_9 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

	// RULE 10 : IF (alt IS n) AND (alt_dot IS p) THEN power IS o;
	double degreeOfSupport_10 = 1.0 * ( ruleConnectionMethod_and(alt_n , alt_dot_p) );
	if( degreeOfSupport_10 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -1.0 + i * 0.002;
			double membership = membership_power_o(x);
			double y = ruleActivationMethod_min( degreeOfSupport_10 , membership );
			defuzzify_power[i] += ruleAccumulationMethod_max( defuzzify_power[i], y );
		}
	}

}

// Defuzzify 
void FunctionBlock_alt_controller::defuzzify() {
	double sum_power = 0.0;
	double wsum_power = 0.0;
	for (int i = 0; i < 1000 ; i++ ) {
		double x = -1.0 + i * 0.002;
		sum_power += defuzzify_power[i];
		wsum_power += x * defuzzify_power[i];
	}
	power = wsum_power / sum_power;
}

// Fuzzify all variables
void FunctionBlock_alt_controller::fuzzify() {
	alt_n = membership_alt_n(alt);
	alt_p = membership_alt_p(alt);
	alt_z = membership_alt_z(alt);
	alt_dot_n = membership_alt_dot_n(alt_dot);
	alt_dot_p = membership_alt_dot_p(alt_dot);
	alt_dot_z = membership_alt_dot_z(alt_dot);
}

// Membership functions 
double FunctionBlock_alt_controller::membership_alt_n(double x) {
	if ( x <= -1.0 )	return 1.0;
	if ( x > 0.0 )	return 0.0;
	if ( x <= 0.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - -1.0 ) / ( 0.0 - -1.0 ) );
}

double FunctionBlock_alt_controller::membership_alt_p(double x) {
	if ( x <= 0.0 )	return 0.0;
	if ( x > 1.0 )	return 1.0;
	if ( x <= 1.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 0.0 ) / ( 1.0 - 0.0 ) );
}

double FunctionBlock_alt_controller::membership_alt_z(double x) {
	if ( x <= -0.2 )	return 0.0;
	if ( x > 0.2 )	return 0.0;
	if ( x <= 0.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - -0.2 ) / ( 0.0 - -0.2 ) );
	if ( x <= 0.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 0.0 ) / ( 0.0 - 0.0 ) );
	if ( x <= 0.2 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 0.0 ) / ( 0.2 - 0.0 ) );
}

double FunctionBlock_alt_controller::membership_alt_dot_n(double x) {
	if ( x <= -1.0 )	return 1.0;
	if ( x > 0.0 )	return 0.0;
	if ( x <= 0.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - -1.0 ) / ( 0.0 - -1.0 ) );
}

double FunctionBlock_alt_controller::membership_alt_dot_p(double x) {
	if ( x <= 0.0 )	return 0.0;
	if ( x > 1.0 )	return 1.0;
	if ( x <= 1.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 0.0 ) / ( 1.0 - 0.0 ) );
}

double FunctionBlock_alt_controller::membership_alt_dot_z(double x) {
	if ( x <= -0.2 )	return 0.0;
	if ( x > 0.2 )	return 0.0;
	if ( x <= 0.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - -0.2 ) / ( 0.0 - -0.2 ) );
	if ( x <= 0.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 0.0 ) / ( 0.0 - 0.0 ) );
	if ( x <= 0.2 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 0.0 ) / ( 0.2 - 0.0 ) );
}

double FunctionBlock_alt_controller::membership_power_n(double x) {
	if ( x <= -1.0 )	return 1.0;
	if ( x > -0.3 )	return 0.0;
	if ( x <= -0.3 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - -1.0 ) / ( -0.3 - -1.0 ) );
}

double FunctionBlock_alt_controller::membership_power_o(double x) {
	if ( x <= -0.4 )	return 0.0;
	if ( x > 0.4 )	return 0.0;
	if ( x <= 0.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - -0.4 ) / ( 0.0 - -0.4 ) );
	if ( x <= 0.4 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 0.0 ) / ( 0.4 - 0.0 ) );
}

double FunctionBlock_alt_controller::membership_power_p(double x) {
	if ( x <= 0.3 )	return 0.0;
	if ( x > 1.0 )	return 1.0;
	if ( x <= 1.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 0.3 ) / ( 1.0 - 0.3 ) );
}


// Print 
void FunctionBlock_alt_controller::print() {
	printf("Function block alt_controller:\n");
	printf("	Input  %20s : %f\n", "alt" , alt);
	printf("	       %20s : %f\n", "alt_n" , alt_n);
	printf("	       %20s : %f\n", "alt_p" , alt_p);
	printf("	       %20s : %f\n", "alt_z" , alt_z);
	printf("	Input  %20s : %f\n", "alt_dot" , alt_dot);
	printf("	       %20s : %f\n", "alt_dot_n" , alt_dot_n);
	printf("	       %20s : %f\n", "alt_dot_p" , alt_dot_p);
	printf("	       %20s : %f\n", "alt_dot_z" , alt_dot_z);
	printf("	Output %20s : %f\n", "power" , power);
}

// Reset output
void FunctionBlock_alt_controller::reset() {
	for( int i=0 ; i < 1000 ; i++ )	{ defuzzify_power[i] = 0.0; }
}

int main(int argc, char *argv[]) {
	// Create function blocks
	FunctionBlock_alt_controller alt_controller;

	// Parse input
	if( argc > 1 ) { alt_controller.alt = atof(argv[1]); }
	if( argc > 2 ) { alt_controller.alt_dot = atof(argv[2]); }

	// Calculate
	alt_controller.calc();

	// Show results
	alt_controller.print();
}
